use crate::settings::SpectrogramColorScheme;

// Color palettes from ffmpeg/libavfilter/avf_showspectrum.c
// https://github.com/FFmpeg/FFmpeg/blob/master/libavfilter/avf_showspectrum.c
// The format is (stop, y, u, v)

const INTENSITY: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.13, 0.03587, 0.15733, -0.02548),
    (0.30, 0.18572, 0.17724, 0.17475),
    (0.60, 0.28184, -0.15930, 0.47132),
    (0.73, 0.65830, -0.37160, 0.24352),
    (0.78, 0.76318, -0.43074, 0.16866),
    (0.91, 0.95336, -0.20454, 0.03313),
    (1.0, 1.0, 0.0, 0.0),
];

const RAINBOW: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.13, 44. / 256., (189. - 128.) / 256., (138. - 128.) / 256.),
    (0.25, 29. / 256., (186. - 128.) / 256., (119. - 128.) / 256.),
    (0.38, 119. / 256., (194. - 128.) / 256., (53. - 128.) / 256.),
    (0.60, 111. / 256., (73. - 128.) / 256., (59. - 128.) / 256.),
    (0.73, 205. / 256., (19. - 128.) / 256., (149. - 128.) / 256.),
    (0.86, 135. / 256., (83. - 128.) / 256., (200. - 128.) / 256.),
    (1.0, 73. / 256., (95. - 128.) / 256., (225. - 128.) / 256.),
];

const MORELAND: &[(f32, f32, f32, f32)] = &[
    (0.0, 44. / 256., (181. - 128.) / 256., (112. - 128.) / 256.),
    (
        0.13,
        126. / 256.,
        (177. - 128.) / 256.,
        (106. - 128.) / 256.,
    ),
    (
        0.25,
        164. / 256.,
        (163. - 128.) / 256.,
        (109. - 128.) / 256.,
    ),
    (
        0.38,
        200. / 256.,
        (140. - 128.) / 256.,
        (120. - 128.) / 256.,
    ),
    (
        0.60,
        201. / 256.,
        (117. - 128.) / 256.,
        (141. - 128.) / 256.,
    ),
    (
        0.73,
        177. / 256.,
        (103. - 128.) / 256.,
        (165. - 128.) / 256.,
    ),
    (
        0.86,
        136. / 256.,
        (100. - 128.) / 256.,
        (183. - 128.) / 256.,
    ),
    (1.0, 68. / 256., (117. - 128.) / 256., (203. - 128.) / 256.),
];

const NEBULAE: &[(f32, f32, f32, f32)] = &[
    (0.0, 10. / 256., (134. - 128.) / 256., (132. - 128.) / 256.),
    (0.23, 21. / 256., (137. - 128.) / 256., (130. - 128.) / 256.),
    (0.45, 35. / 256., (134. - 128.) / 256., (134. - 128.) / 256.),
    (0.57, 51. / 256., (130. - 128.) / 256., (139. - 128.) / 256.),
    (
        0.67,
        104. / 256.,
        (116. - 128.) / 256.,
        (162. - 128.) / 256.,
    ),
    (
        0.77,
        120. / 256.,
        (105. - 128.) / 256.,
        (188. - 128.) / 256.,
    ),
    (
        0.87,
        140. / 256.,
        (105. - 128.) / 256.,
        (188. - 128.) / 256.,
    ),
    (1.0, 1.0, 0.0, 0.0),
];

const FIRE: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.23, 44. / 256., (132. - 128.) / 256., (127. - 128.) / 256.),
    (0.45, 62. / 256., (116. - 128.) / 256., (140. - 128.) / 256.),
    (0.57, 75. / 256., (105. - 128.) / 256., (152. - 128.) / 256.),
    (0.67, 95. / 256., (91. - 128.) / 256., (166. - 128.) / 256.),
    (0.77, 126. / 256., (74. - 128.) / 256., (172. - 128.) / 256.),
    (0.87, 164. / 256., (73. - 128.) / 256., (162. - 128.) / 256.),
    (1.0, 1.0, 0.0, 0.0),
];

const FIERY: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.23, 36. / 256., (116. - 128.) / 256., (163. - 128.) / 256.),
    (0.45, 52. / 256., (102. - 128.) / 256., (200. - 128.) / 256.),
    (0.57, 116. / 256., (84. - 128.) / 256., (196. - 128.) / 256.),
    (0.67, 157. / 256., (67. - 128.) / 256., (181. - 128.) / 256.),
    (0.77, 193. / 256., (40. - 128.) / 256., (155. - 128.) / 256.),
    (
        0.87,
        221. / 256.,
        (101. - 128.) / 256.,
        (134. - 128.) / 256.,
    ),
    (1.0, 1.0, 0.0, 0.0),
];

const FRUIT: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.20, 29. / 256., (136. - 128.) / 256., (119. - 128.) / 256.),
    (0.30, 60. / 256., (119. - 128.) / 256., (90. - 128.) / 256.),
    (0.40, 85. / 256., (91. - 128.) / 256., (85. - 128.) / 256.),
    (0.50, 116. / 256., (70. - 128.) / 256., (105. - 128.) / 256.),
    (0.60, 151. / 256., (50. - 128.) / 256., (146. - 128.) / 256.),
    (0.70, 191. / 256., (63. - 128.) / 256., (178. - 128.) / 256.),
    (1.0, 98. / 256., (80. - 128.) / 256., (221. - 128.) / 256.),
];

const COOL: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.15, 0.0, 0.5, -0.5),
    (1.0, 1.0, -0.5, 0.5),
];

const MAGMA: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.10, 23. / 256., (175. - 128.) / 256., (120. - 128.) / 256.),
    (0.23, 43. / 256., (158. - 128.) / 256., (144. - 128.) / 256.),
    (0.35, 85. / 256., (138. - 128.) / 256., (179. - 128.) / 256.),
    (0.48, 96. / 256., (128. - 128.) / 256., (189. - 128.) / 256.),
    (
        0.64,
        128. / 256.,
        (103. - 128.) / 256.,
        (214. - 128.) / 256.,
    ),
    (0.92, 205. / 256., (80. - 128.) / 256., (152. - 128.) / 256.),
    (1.0, 1.0, 0.0, 0.0),
];

const GREEN: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.75, 0.5, 0.0, -0.5),
    (1.0, 1.0, 0.0, 0.0),
];

const VIRIDIS: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (
        0.10,
        0x39 as f32 / 255.0,
        (0x9D as f32 - 128.0) / 255.0,
        (0x8F as f32 - 128.0) / 255.0,
    ),
    (
        0.23,
        0x5C as f32 / 255.0,
        (0x9A as f32 - 128.0) / 255.0,
        (0x68 as f32 - 128.0) / 255.0,
    ),
    (
        0.35,
        0x69 as f32 / 255.0,
        (0x93 as f32 - 128.0) / 255.0,
        (0x57 as f32 - 128.0) / 255.0,
    ),
    (
        0.48,
        0x76 as f32 / 255.0,
        (0x88 as f32 - 128.0) / 255.0,
        (0x4B as f32 - 128.0) / 255.0,
    ),
    (
        0.64,
        0x8A as f32 / 255.0,
        (0x72 as f32 - 128.0) / 255.0,
        (0x4F as f32 - 128.0) / 255.0,
    ),
    (
        0.80,
        0xA3 as f32 / 255.0,
        (0x50 as f32 - 128.0) / 255.0,
        (0x66 as f32 - 128.0) / 255.0,
    ),
    (
        1.0,
        0xCC as f32 / 255.0,
        (0x2F as f32 - 128.0) / 255.0,
        (0x87 as f32 - 128.0) / 255.0,
    ),
];

const PLASMA: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (
        0.10,
        0x27 as f32 / 255.0,
        (0xC2 as f32 - 128.0) / 255.0,
        (0x82 as f32 - 128.0) / 255.0,
    ),
    (
        0.58,
        0x5B as f32 / 255.0,
        (0x9A as f32 - 128.0) / 255.0,
        (0xAE as f32 - 128.0) / 255.0,
    ),
    (
        0.70,
        0x89 as f32 / 255.0,
        (0x44 as f32 - 128.0) / 255.0,
        (0xAB as f32 - 128.0) / 255.0,
    ),
    (
        0.80,
        0xB4 as f32 / 255.0,
        (0x2B as f32 - 128.0) / 255.0,
        (0x9E as f32 - 128.0) / 255.0,
    ),
    (
        0.91,
        0xD2 as f32 / 255.0,
        (0x38 as f32 - 128.0) / 255.0,
        (0x92 as f32 - 128.0) / 255.0,
    ),
    (1.0, 1.0, 0.0, 0.0),
];

const CIVIDIS: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (
        0.20,
        0x28 as f32 / 255.0,
        (0x98 as f32 - 128.0) / 255.0,
        (0x6F as f32 - 128.0) / 255.0,
    ),
    (
        0.50,
        0x48 as f32 / 255.0,
        (0x95 as f32 - 128.0) / 255.0,
        (0x74 as f32 - 128.0) / 255.0,
    ),
    (
        0.63,
        0x69 as f32 / 255.0,
        (0x84 as f32 - 128.0) / 255.0,
        (0x7F as f32 - 128.0) / 255.0,
    ),
    (
        0.76,
        0x89 as f32 / 255.0,
        (0x75 as f32 - 128.0) / 255.0,
        (0x84 as f32 - 128.0) / 255.0,
    ),
    (
        0.90,
        0xCE as f32 / 255.0,
        (0x35 as f32 - 128.0) / 255.0,
        (0x95 as f32 - 128.0) / 255.0,
    ),
    (1.0, 1.0, 0.0, 0.0),
];

const TERRAIN: &[(f32, f32, f32, f32)] = &[
    (0.0, 0.0, 0.0, 0.0),
    (0.15, 0.0, 0.5, 0.0),
    (0.60, 1.0, -0.5, -0.5),
    (0.85, 1.0, -0.5, 0.5),
    (1.0, 1.0, 0.0, 0.0),
];

const GRAYSCALE: &[(f32, f32, f32, f32)] = &[(0.0, 0.0, 0.0, 0.0), (1.0, 1.0, 0.0, 0.0)];

pub fn get_palette(scheme: SpectrogramColorScheme) -> &'static [(f32, f32, f32, f32)] {
    match scheme {
        SpectrogramColorScheme::Intensity => INTENSITY,
        SpectrogramColorScheme::Rainbow => RAINBOW,
        SpectrogramColorScheme::Moreland => MORELAND,
        SpectrogramColorScheme::Nebulae => NEBULAE,
        SpectrogramColorScheme::Fire => FIRE,
        SpectrogramColorScheme::Fiery => FIERY,
        SpectrogramColorScheme::Fruit => FRUIT,
        SpectrogramColorScheme::Cool => COOL,
        SpectrogramColorScheme::Magma => MAGMA,
        SpectrogramColorScheme::Green => GREEN,
        SpectrogramColorScheme::Viridis => VIRIDIS,
        SpectrogramColorScheme::Plasma => PLASMA,
        SpectrogramColorScheme::Cividis => CIVIDIS,
        SpectrogramColorScheme::Terrain => TERRAIN,
        // Channel is not a palette, use a simple grayscale gradient for the dBFS scale
        SpectrogramColorScheme::Channel => GRAYSCALE,
    }
}
